{"ast":null,"code":"import { of, BehaviorSubject } from 'rxjs';\nimport { tap, catchError, delay } from 'rxjs/operators';\nimport * as z from 'zod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst emailSchema = z.string().email({\n  message: 'Please enter a valid email address'\n});\nconst passwordSchema = z.string().min(8, {\n  message: 'Password must be at least 8 characters long'\n});\nconst nameRegex = /^[A-Za-z\\- ]+$/;\nconst firstNameSchema = z.string().regex(nameRegex, {\n  message: 'First name must consists of only alphabets'\n}).min(2, {\n  message: 'First name must be at least 2 characters long'\n});\nconst lastNameSchema = z.string().regex(nameRegex, {\n  message: 'Last name must consists of only alphabets'\n}).min(2, {\n  message: 'Last name must be at least 2 characters long'\n});\nconst digitsRegex = /^\\d+$/;\nconst numberSchema = z.string().regex(digitsRegex, {\n  message: 'Please enter a valid phone number'\n});\nconst confirmPasswordSchema = z.string().min(8, {\n  message: 'Confirm password must be at least 8 characters long'\n});\nconst userLoginSchema = z.object({\n  email: emailSchema,\n  password: passwordSchema\n});\nconst userSignUpSchema = z.object({\n  email: emailSchema,\n  password: passwordSchema,\n  firstName: firstNameSchema,\n  lastName: lastNameSchema,\n  number: numberSchema,\n  confirmPassword: confirmPasswordSchema\n}).refine(data => data.password === data.confirmPassword, {\n  message: 'Passwords do not match'\n});\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:4200/api';\n      this.isAuthenticated = new BehaviorSubject(false);\n      this.authStatus$ = this.isAuthenticated.asObservable();\n    }\n    login(email, password) {\n      try {\n        userLoginSchema.parse({\n          email,\n          password\n        });\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          const errorMessage = error.errors[0].message;\n          throw new Error(errorMessage);\n        }\n      }\n      return this.http.post(`${this.apiUrl}/login`, {\n        email,\n        password\n      }).pipe(tap(response => {\n        // Handle successful login, e.g., store the user data, token, etc.\n        this.onSuccessfulLogin(response);\n        console.log('isAuthenticated:', this.isAuthenticated.value); // add this line\n      }), catchError(err => {\n        console.log(err);\n        throw err;\n      }));\n    }\n    fakeLogin(email, password) {\n      const userData = {\n        id: 1,\n        email: email,\n        firstName: 'John',\n        lastName: 'Doe'\n      };\n      const response = {\n        success: true,\n        message: 'Login successful',\n        data: {\n          user: userData,\n          access_token: 'some-auth-token'\n        }\n      };\n      return of({\n        access_token: 'fakeToken',\n        user: {\n          email,\n          firstName: 'John',\n          lastName: 'Doe'\n        }\n      }).pipe(delay(1000), tap(response => {\n        this.isAuthenticated.next(true);\n      }));\n    }\n    signUp(email, password, firstName, lastName, number, confirmPassword) {\n      try {\n        userSignUpSchema.parse({\n          email,\n          password,\n          firstName,\n          lastName,\n          number,\n          confirmPassword\n        });\n        if (password !== confirmPassword) {\n          throw new Error('Password and confirm password do not match');\n        }\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          const errorMessage = error.errors[0].message;\n          throw new Error(errorMessage);\n        } else {\n          throw error;\n        }\n      }\n      return this.http.post(`${this.apiUrl}/register-user`, {\n        email,\n        password,\n        firstName,\n        lastName,\n        number\n      }).pipe(catchError(err => {\n        console.log(err);\n        throw err;\n      }));\n    }\n    onSuccessfulLogin(response) {\n      // Store user data, token, etc., as needed\n      const token = response.access_token;\n      const userData = response.user;\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n    }\n    // Call this method after successful login to store the user data or token\n    storeUserData(response) {\n      localStorage.setItem('user', JSON.stringify(response.user));\n      localStorage.setItem('token', response.token);\n    }\n    // Call this method to check if the user is logged in\n    isLoggedIn() {\n      return this.isAuthenticated.getValue();\n    }\n    logout() {\n      // Perform your logout logic here, e.g., API calls\n      // After successful logout, set isAuthenticated to false\n      this.setAuthenticated(false);\n    }\n    setAuthenticated(status) {\n      this.isAuthenticated.next(status);\n      console.log('isAuthenticated:', this.isAuthenticated.value); // add this line\n    }\n\n    getIsAuthenticated() {\n      return this.isAuthenticated;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}